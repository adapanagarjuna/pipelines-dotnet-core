# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Debug'
  testProject: "dotnetcore-tests/dotnetcore-tests.csproj"

steps:
# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'

- script: |
    dotnet test --logger trx --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/
  displayName: 'dotnet test'

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'test'
#     projects: '**/dotnetcore-tests/dotnetcore-tests.csproj'
#     publishTestResults: true
#     arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'

- script: |
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path . 
    ./reportgenerator "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Run Reportgenerator on Linux

- script: |
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
    .\reportgenerator.exe "-reports:$(Build.SourcesDirectory)/coverage/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HTMLInline;HTMLChart"
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Run Reportgenerator on Windows


- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/*cobertura.xml'
    #pathToSources: '(Build.SourcesDirectory)/TestResults/Coverage'
